"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.authMiddleware = authMiddleware;
const tokenService_1 = require("./tokenService");
function authMiddleware(roles) {
    return (req, res, next) => {
        let token;
        let refreshToken;
        if (req.cookies.userToken) {
            token = req.cookies.userToken;
            refreshToken = req.cookies.userRefreshToken;
        }
        else if (req.cookies.adminToken) {
            token = req.cookies.adminToken;
            refreshToken = req.cookies.adminRefreshToken;
        }
        else if (req.cookies.companyToken) {
            token = req.cookies.companyToken;
            refreshToken = req.cookies.companyRefreshToken;
        }
        if (!token) {
            return res.status(401).json({ message: 'Token is missing' });
        }
        let decodedToken = tokenService_1.TokenService.verifyAccessToken(token);
        if (!decodedToken && refreshToken) {
            decodedToken = tokenService_1.TokenService.verifyRefreshToken(refreshToken);
            if (decodedToken) {
                const newAccessToken = tokenService_1.TokenService.generateToken({
                    user: decodedToken.user,
                    role: decodedToken.role
                });
                if (token === req.cookies.userToken) {
                    res.cookie('userToken', newAccessToken, { maxAge: 60 * 60 * 1000 });
                }
                else if (token === req.cookies.adminToken) {
                    res.cookie('adminToken', newAccessToken, { maxAge: 60 * 60 * 1000 });
                }
                else if (token === req.cookies.companyToken) {
                    res.cookie('companyToken', newAccessToken, { maxAge: 60 * 60 * 1000 });
                }
                decodedToken = Object.assign(Object.assign({}, decodedToken), { role: decodedToken.role });
            }
        }
        if (!decodedToken || !roles.includes(decodedToken.role)) {
            return res.status(403).json({ message: 'Unauthorized' });
        }
        req.user = decodedToken;
        next();
    };
}
