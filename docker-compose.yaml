version: "3.8"

services:
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - my-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - my-network
    restart: always
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      retries: 5
      start_period: 30s

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    restart: always
    environment:
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 30s
      retries: 5
      start_period: 30s

  user:
    build:
      context: ./backend/userService
    ports:
      - "3000:3000"
    depends_on:
      - rabbitmq
      - kafka
    networks:
      - my-network

  company:
    build:
      context: ./backend/companyService
    ports:
      - "3001:3001"
      - "6001:6001"
      - "6002:6002"
      - "6003:6003"
    depends_on:
      - rabbitmq
      - kafka
    networks:
      - my-network

  admin:
    build:
      context: ./backend/adminService
    ports:
      - "3002:3002"
    depends_on:
      - rabbitmq
      - kafka
    networks:
      - my-network

  booking:
    build:
      context: ./backend/bookingService
    ports:
      - "3003:3003"
    depends_on:
      - rabbitmq
      - kafka
    networks:
      - my-network

  chat:
    build:
      context: ./backend/chatService
    ports:
      - "3004:3004"
    depends_on:
      - rabbitmq
      - kafka
    networks:
      - my-network

  nginx:
    build:
      context: ./nginx
    ports:
      - "80:80"
    depends_on:
      - user
      - company
      - admin
      - booking
      - chat
    networks:
      - my-network

  frontend:
    build:
      context: ./frontend
    ports:
      - "8080:8080"
    depends_on:
      - user
      - company
      - admin
      - booking
      - chat
    networks:
      - my-network

networks:
  my-network:
    driver: bridge
